<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the debugger object

fps_avg1 = 0;
fps_total1 = 0;
frames1 = 0;
fps_avg2 = 0;
fps_total2 = 0;
frames2 = 0;
on = true; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw debug text to screen

if(instance_exists(obj_game_mode)){
    //Debug
    if((keyboard_check_pressed(vk_f1) || global.debug == true) &amp;&amp; on == false){
        on = true; 
        global.debug = true; 
    }
    else if((keyboard_check_pressed(vk_f1) || global.debug == false) &amp;&amp; on == true){
        on = false; 
        global.debug = false;
    }
}



draw_set_halign(fa_left); 
draw_set_valign(fa_left);
draw_set_color(c_red);
 
if(on){
    // Calculations to display a more stable fps
        frames1 += 1;
        fps_total1 += round(fps_real);
        fps_avg1 = fps_total1 div frames1;
        // Reset if a second passed
        if (frames1 == 30) {
            frames1 = 0;
            fps_total1 = 0;
            frames2 += 1;
            fps_total2 += fps_avg1;
            fps_avg2 = fps_total2 div frames2;
            // Reset if a minute has passed to avoid out of bounds
            if (frames2 == 60) {
                frames2 = 0;
                fps_total2 = 0;
            }
        }
        
    
    draw_text(10, 12, "fps: "+string_format(fps_avg2, 2, 2));
    
    draw_text(10, 36, "direction: "+string_format(obj_player.direction_horizontal, 1, 0)+","+string_format(obj_player.direction_vertical, 1, 0));
    draw_text(10, 60, "hspeed: "+string_format(obj_player.hspd, 2, 2));
    draw_text(10, 72, "vspeed: "+string_format(obj_player.vspd, 2, 2));
    
    draw_text(10, 96, "xcoor: "+string_format(obj_player.x, 2, 2));
    draw_text(10, 108, "ycoor: "+string_format(obj_player.y, 2, 2));
    
    if(instance_exists(obj_race_start))
        draw_text(10, 120, "race time"+string_format(global.race_timer, 2, 2)); 
        
    draw_text(10, 156, "dash_count: "+string_format(obj_player.dash_count, 2, 2));
    draw_text(10, 212, "gamepad: "+string_format(gamepad_button_check(0, gp_shoulderrb), 2, 2));
    draw_text(10, 224, "magnitude: "+string_format(obj_player.magnitude, 2, 2));
    draw_text(10, 236, "threshold: "+string_format(obj_player.threshold, 2, 2));
    draw_text(10, 248, "left: "+string_format(obj_player.left, 2, 2));
    draw_text(10, 260, "left_held: "+string_format(obj_player.left_held, 2, 2));
    draw_text(10, 272, "left_released: "+string_format(obj_player.left_released, 2, 2));
    draw_text(10, 284, "x_axis: "+string_format(gamepad_axis_value(0, gp_axislh), 2, 2));
    
    draw_text(10, 296, "ul: "+string_format(obj_player.diag_ul_held, 2, 2));
    draw_text(10, 308, "ur: "+string_format(obj_player.diag_ur_held, 2, 2));
    draw_text(10, 320, "dl: "+string_format(obj_player.diag_dl_held, 2, 2));
    draw_text(10, 332, "dr: "+string_format(obj_player.diag_dr_held, 2, 2));
    draw_text(10, 344, "right: "+string_format(obj_player.right_held, 2, 2));
    draw_text(10, 356, "up: "+string_format(obj_player.stick_up, 2, 2));
    draw_text(10, 368, "down: "+string_format(obj_player.down, 2, 2));
    draw_text(10, 380, "y_axis: "+string_format(gamepad_axis_value(0, gp_axislv), 2, 2));
    
    draw_text(10, 404, "dash_held: "+string_format(obj_player.dash_distance_mod, 2, 2));
    draw_text(10, 416, "sprite_index: "+string_format(obj_player.sprite_index, 1, 0));
}

// Dash Charge
    draw_set_halign(fa_center);
    if (obj_player.dash_charge_mode == true) {
        draw_text(window_get_width()/2, 40, "Dash Charge Mode");
    } else {
        draw_text(window_get_width()/2, 40, "Full Dash Mode");
    }
    draw_set_halign(fa_left);    
    if (obj_player.dash_distance_mod &gt;= 1) {
        draw_rectangle_colour(window_get_width()-120, 20, window_get_width()-100, 60, c_maroon, c_maroon, c_maroon, c_maroon, false);
    }
    if (obj_player.dash_distance_mod &gt;= 2) {
        draw_rectangle_colour(window_get_width()-100, 20, window_get_width()-80, 60, c_red, c_red, c_red, c_red, false);
    }
    if (obj_player.dash_distance_mod &gt;= 3) {
        draw_rectangle_colour(window_get_width()-80, 20, window_get_width()-60, 60, c_yellow, c_yellow, c_yellow, c_yellow, false);
    }
    if (obj_player.dash_distance_mod &gt;= 4) {
        draw_rectangle_colour(window_get_width()-60, 20, window_get_width()-40, 60, c_lime, c_lime, c_lime, c_lime, false);
    }
    if (obj_player.dash_distance_mod &gt;= 5) {
        draw_rectangle_colour(window_get_width()-40, 20, window_get_width()-20, 60, c_green, c_green, c_green, c_green, false);
    }
    if (obj_player.dash_held_frames &gt;= 155 &amp;&amp; obj_player.dash_held_frames &lt;= 170) {
        draw_set_colour(c_red);
        draw_rectangle(window_get_width()-150, 25, window_get_width()-145, 45, false);
        draw_rectangle(window_get_width()-150, 50, window_get_width()-145, 55, false);
        draw_set_colour(c_gray);
        draw_rectangle(window_get_width()-150, 25, window_get_width()-145, 45, true);
        draw_rectangle(window_get_width()-150, 50, window_get_width()-145, 55, true);
    }
    draw_set_colour(c_gray);
    draw_rectangle(window_get_width()-120, 20, window_get_width()-19, 60, true);
    draw_rectangle(window_get_width()-119, 21, window_get_width()-20, 59, true);
    draw_rectangle(window_get_width()-100, 20, window_get_width()-99, 60, false);
    draw_rectangle(window_get_width()-80, 20,  window_get_width()-79, 60, false);
    draw_rectangle(window_get_width()-60, 20,  window_get_width()-59, 60, false);
    draw_rectangle(window_get_width()-40, 20,  window_get_width()-39, 60, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
