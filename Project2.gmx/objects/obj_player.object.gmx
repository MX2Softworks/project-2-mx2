<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fahad_player_test_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player

// Movement variables
    maxspd = 8;
    minspd = 0;
    jumpheight = 8;
    jumppeak = 0;  
    hspd = 0;
    vspd = 0;
    xrem = 0;
    yrem = 0;
    acc = .5;
    grav = .30;
    is_sliding = 0;
    is_rolling = 0;

// Wall Jumping
    wall_slide = false;  
    start_slide = false;
    wall_jump = false;   
    wall_jump_counter = 0;
    wall_jump_counter_max = 7;
    wall_push = false;
    push_frames = 0;
    
// Dash variables
    dash_count = 0;
    can_dash = false;
    dash_speed = 30;
    dash_frames_v = 0;
    dash_frames_h = 0;
    float_frames = 0;
    fall_frames = 0;
    v_float = false;
    h_float_left = false;
    h_float_right = false;
    switch_left = false;
    switch_right = false;
    switch_up = false;
    can_float = false;
    dashed = false;
    dash_held_frames = 0;
    dash_distance_mod = 0;
    dash_charge_mode = false;
    dash_activate = false;
    dashing = false;

// Input variables
    right = false;
    right_held = false;
    right_released = false;
    
    left = false;
    left_held = false;
    left_released = false;
    
    up = false; 
    up_held = false;
    up_released = false;
    stick_up_held = false;
    stick_up = false;
    stick_up_released = false;
    
    down = false;
    down_held = false;
    down_released = false;
    
    sprint = false;
    dash = false;
    dash_held = false;
    dash_released = false;
    charge_dash = false;
    charge_dash_held = false;
    charge_dash_released = false;
    
    diag_ul = false;
    diag_ul_held = false;
    diag_ul_released = false;
    diag_ur = false;
    diag_ur_held = false;
    diag_ur_released = false;
    diag_dl = false;
    diag_dl_held = false;
    diag_dl_released = false;
    diag_dr = false;
    diag_dr_held = false;
    diag_dr_released = false;
    
// Controller only variables
    gp_id = 0;
    threshold = .5;
    threshold_diag = 1.05;
    controller_alarm = 1;
    magnitude = 0;
    x_axis = 0;
    y_axis = 0;   
    
state = scr_player_move_state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Adds motion blur during dashes. 
if(instance_exists(obj_blur) &amp;&amp; (abs(hspd) &gt; 12 || abs(vspd) &gt; 12)){
    d3d_set_fog(1,c_navy,0,0);
    surface_set_target(global.motion_blur);
    draw_sprite_ext(sprite_index,image_index,x-view_xview[0],y-view_yview[0],image_xscale,image_yscale,image_angle,image_blend,image_alpha);
    surface_reset_target();
    d3d_set_fog(0,c_navy,0,0);
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Execute the state

scr_get_input();
script_execute(state);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations
//Horizontal animations if no vertical speed. 
    
    //Switches to idle if hspd and vspd are 0 and the player is in the running animation
    //Reset the max speed to normal, in case the player was rolling. 
    if(hspd == 0 &amp;&amp; vspd == 0 &amp;&amp; ( sprite_index == spr_fahad_player_test_1 
       || (sprite_index == spr_player_slide_to_crouch &amp;&amp; !down_held &amp;&amp; !down &amp;&amp; !diag_dl &amp;&amp; !diag_dr &amp;&amp; !place_meeting(x, y-8, obj_solid)))
      ){ 
        sprite_index = spr_player_idle; 
        maxspd = 8; 
        image_index = 0; 
        is_rolling = 0;
        is_sliding = 0; 
    }
    //Switches to running if we have any hspd but aren't jumping/falling.
    //Reset max speed to normal, in case the player was previously rolling.
    else if(hspd != 0 &amp;&amp; vspd == 0 &amp;&amp; !diag_dl_held &amp;&amp; !diag_dr_held 
            &amp;&amp; sprite_index == spr_player_idle || sprite_index == spr_fahad_player_test_1 || sprite_index == spr_player_wall_slide
           ){
        sprite_index = spr_fahad_player_test_1; 
        maxspd = 8;   
        image_speed = .13*abs(hspd)/4 * (delta_time)/(1/60*1000000); //animation speed is a factor of our speed. 
        is_rolling = 0;
        is_sliding = 0;
    }
    
//Jumping and falling animation based on previous animation conditions. 
    
    //Switches to jump animation if we are moving upwards and haven't already switched.
    if(vspd &lt; 0 &amp;&amp; (sprite_index == spr_fahad_player_test_1 || sprite_index == spr_player_idle || sprite_index == spr_player_slide
       || ((sprite_index == spr_player_slide_to_crouch || sprite_index == spr_player_roll) &amp;&amp; !place_meeting(x, y-8, obj_solid))) 
      ){
        sprite_index = spr_player_jump;
        image_index = 0; 
        image_speed = (delta_time)/(1/9*1000000); 
    }
    //Stops jump animation on the last frame.
    else if(vspd &lt; 0 &amp;&amp; sprite_index == spr_player_jump &amp;&amp; image_index &gt; image_number-1){
        image_speed = 0; 
        image_index = 2; 
    }
    //Switches to the falling animation if the player is moving downwards and hasn't already switched. 
    else if(vspd &gt; 0 &amp;&amp; sprite_index != spr_player_fall){
        sprite_index = spr_player_fall;
        image_speed = 0; 
        image_index = 0; 
    }
    //Starts playing the falling animation once the player hits the ground or if the player has finished a dash. 
    else if(vspd == 0 
            &amp;&amp; ((sprite_index == spr_player_fall &amp;&amp; image_index == 0) || 
               ((sprite_index == spr_player_dash  ||  sprite_index == spr_player_dash_horizontal) 
               &amp;&amp; dashed == false &amp;&amp; image_speed == 0))
           ){
        sprite_index = spr_player_fall;
        image_index = 0; 
        image_speed = (delta_time)/(1/15*1000000); 
    }
    //Switches back to idle once the falling animation finishes. 
    else if(floor(vspd) == 0 &amp;&amp; sprite_index == spr_player_fall &amp;&amp; image_index &gt; image_number-1){
        sprite_index = spr_player_idle; 
        image_index = 0;
    }
    
//Sliding Animations
    
    //Switches to the sliding animation if the player presses down and hasn't already been switched. 
    if((down || diag_dr_held || diag_dl_held) &amp;&amp; place_meeting(x, y+16, obj_solid) &amp;&amp; hspd != 0 
        &amp;&amp; sprite_index != spr_player_slide &amp;&amp; sprite_index != spr_player_crouch 
        &amp;&amp; sprite_index != spr_player_slide_to_crouch &amp;&amp; sprite_index != spr_player_roll
      ){
        sprite_index = spr_player_slide;
        image_index = 0;
        image_speed = (delta_time)/(1/15*1000000);
        is_sliding = 1;
    }
    //Stops the sliding animation on the slide 
    if(sprite_index == spr_player_slide &amp;&amp; image_index &gt;= 3 &amp;&amp; image_index &lt; 4){
        image_index = 3; 
        image_speed = 0; 
    }
    //Reverses the sliding animation if the player lets go of the down key. 
    if(!down &amp;&amp; !down_held &amp;&amp; !diag_dl_held &amp;&amp; !diag_dr_held &amp;&amp; hspd == 0 
       &amp;&amp; sprite_index == spr_player_slide &amp;&amp; image_index &lt;= (image_number/2)
       &amp;&amp; !place_meeting(x, y-8, obj_solid)
      ){
        image_index = image_number-1 - image_index; 
        image_speed = (delta_time)/(1/15*1000000); 
    }
    //Switches to the idle animation if the down key is not being pressed and the sliding animation has finished.
    else if(!down &amp;&amp; !down_held &amp;&amp; !diag_dl_held &amp;&amp; !diag_dr_held &amp;&amp; sprite_index == spr_player_slide &amp;&amp; image_index &gt; image_number-1
            &amp;&amp; !place_meeting(x, y-8, obj_solid)
           ){
        sprite_index = spr_player_idle;  
        image_index = 0; 
        is_sliding = 0; 
    }
    
//Crouching Animation

    //Switches to the crouching animation if the player presses down, isn't moving, and hasn't already been switched.
    if((down || down_held || place_meeting(x, y, obj_solid)) &amp;&amp; place_meeting(x, y+1, obj_solid) &amp;&amp; hspd == 0 &amp;&amp; sprite_index != spr_player_crouch 
        &amp;&amp; sprite_index != spr_player_roll &amp;&amp; sprite_index != spr_player_slide &amp;&amp; sprite_index != spr_player_slide_to_crouch 
      ){
        sprite_index = spr_player_crouch; 
        image_index = 0;
        image_speed = (delta_time)/(1/9*1000000); 
    }
    //Stops the crouching animation on the squat.
    else if(sprite_index == spr_player_crouch &amp;&amp; image_index &gt; 2 &amp;&amp; image_index &lt; 3 &amp;&amp; is_rolling == 0){
        image_index = 2;
        image_speed = 0; 
    }
    //Reverse the crouching animation if the player lets go of the down key. 
    else if(!down &amp;&amp; !down_held &amp;&amp; !diag_dl_held &amp;&amp; !diag_dr_held &amp;&amp; hspd == 0 
            &amp;&amp; sprite_index == spr_player_crouch &amp;&amp; image_index &lt;= (image_number/2)
            &amp;&amp; !place_meeting(x, y-8, obj_solid) 
           ){
        image_index = image_number-1 - image_index; 
        image_speed = (delta_time)/(1/15*1000000); 
    }
    //Switches to the idle animation if the down key is not being pressed and the crouching animation has finished.
    else if(!down &amp;&amp; !down_held &amp;&amp; !diag_dl_held &amp;&amp; !diag_dr_held 
            &amp;&amp; sprite_index == spr_player_crouch &amp;&amp; image_index &gt; image_number-1 
            &amp;&amp; !place_meeting(x, y-8, obj_solid) 
           ){
        sprite_index = spr_player_idle; 
        image_index = 0;   
    }
    
//Slide to Crouch Animation  

    //Switches the slide animation to the slide-to-crouch animation if hspd is 0 and the player is holdling/pressing down.
    if((down || down_held || diag_dl_held || diag_dr_held || place_meeting(x, y-8, obj_solid)) &amp;&amp; hspd == 0 
       &amp;&amp; sprite_index == spr_player_slide &amp;&amp; image_index == 3
      ){
        sprite_index = spr_player_slide_to_crouch;
        image_index = 0;  
        image_speed = (delta_time)/(1/9*1000000); 
        is_sliding = 0; 
         
    }
    //Switches to the crouch animation once the slide-to-crouch animation finishes. 
    else if((down || down_held || diag_dr || diag_dl || place_meeting(x, y-8, obj_solid)) &amp;&amp; hspd == 0 
            &amp;&amp; sprite_index == spr_player_slide_to_crouch &amp;&amp; image_index &gt; image_number-1
           ){
        image_speed = 0; 
        sprite_index = spr_player_crouch;
        image_index = 2;   
        is_sliding = 0; 
    }
     
//Rolling Animation

    //Switches to the rolling animation if down is being pressed and there is any horizontal speed and the player is in the crouching animation. 
    //Lower max speed to 3 when rolling.
    if(((down || down_held || diag_dl_held || diag_dr_held) || place_meeting(x, y-8, obj_solid) &amp;&amp; (left || right)) 
       &amp;&amp; place_meeting(x, y+1, obj_solid) 
       &amp;&amp; (direction_horizontal != 0 || diag_dl_held || diag_dr_held || hspd != 0) 
       &amp;&amp; (sprite_index == spr_player_crouch || sprite_index == spr_player_slide_to_crouch)
      ){
        sprite_index = spr_player_roll;
        image_index = 0;
        image_speed = (delta_time)/(1/20*1000000); 
        is_sliding = 0;
        is_rolling = 1; 
        maxspd = 3;
    }
    //Switches to the crouching animation if the speed of the horizontal movement is 0.
    //Reset max speed to normal.  
    else if(sprite_index == spr_player_roll &amp;&amp; hspd == 0 &amp;&amp; image_index &gt; image_number-1){
        sprite_index = spr_player_crouch; 
        image_index = 2;
        image_speed = 0; 
        is_rolling = 0; 
        maxspd = 8; 
    }
    //If the rolling animation has not finished and the speed is 0, set the speed to 3 times the direction of the previous movement. 
    //Lower max speed to 3 when rolling.
    else if(sprite_index == spr_player_roll &amp;&amp; hspd == 0 &amp;&amp; direction_horizontal == 0 &amp;&amp; image_index &lt;= image_number-1){
        if(!place_meeting(x+(3*sign(image_xscale)), y, obj_solid) 
           &amp;&amp; !place_meeting(x+(2*sign(image_xscale)), y, obj_solid) 
           &amp;&amp; !place_meeting(x+(1*sign(image_xscale)), y, obj_solid)){ 
            x += 3 * sign(image_xscale) * global.delta; 
        }
        is_rolling = 1;
        maxspd = 3; 
    }
    
//Dashing Animation

    //Switches to dash animation when the dash movement occurs and we have not already switched.
    if(dashed &amp;&amp; (dash || charge_dash_released) &amp;&amp; dash_count &lt;= 3){
    
        if (dash_count == 3) {
            dash_count += 1;
        }
        
        if(((left_held || (diag_ul_held &amp;&amp; abs(x_axis) &gt;= abs(y_axis)) || (diag_dl_held &amp;&amp; abs(x_axis) &gt;= abs(y_axis))) 
           || (right_held || (diag_ur_held &amp;&amp; abs(x_axis) &gt;= abs(y_axis)) || (diag_dr_held &amp;&amp; abs(x_axis) &gt;= abs(y_axis))))
          ){ 
            sprite_index = spr_player_dash_horizontal; 
            image_index = 0;
            image_speed = (delta_time)/(1/60*1000000);  
        }
        else { 
            sprite_index = spr_player_dash; 
            image_index = 0;
            image_speed = (delta_time)/(1/30*1000000);  
        }
               
    }
    //Slows the dash speed down every frame once the player has switched to the dash animation.
    else if((sprite_index == spr_player_dash || sprite_index == spr_player_dash_horizontal)
            &amp;&amp; !dash &amp;&amp; !charge_dash_released){
        image_speed *= .955
    }
    
//Wall Slide
    
    if(wall_slide &amp;&amp; sprite_index == spr_player_fall){
        sprite_index = spr_player_wall_slide; 
        image_index = 0;
        image_speed = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sound Effects

//Jump
if((up &amp;&amp; place_meeting(x, y+10, obj_solid) &amp;&amp; sprite_index == spr_player_jump) 
   || (up &amp;&amp; wall_jump &amp;&amp; wall_jump_counter &lt; wall_jump_counter_max)
  ){
    audio_play_sound(snd_jump_0, 10, false);
}

//Slide
if((sprite_index == spr_player_wall_slide || (sprite_index == spr_player_slide &amp;&amp; image_index &gt; 1)) &amp;&amp; !audio_is_playing(snd_slide)){
    audio_play_sound(snd_slide, 0, false); 
    audio_sound_gain(snd_slide, .02, 0); 
}
else if(sprite_index != spr_player_wall_slide &amp;&amp; sprite_index != spr_player_slide &amp;&amp; audio_is_playing(snd_slide)){
    audio_stop_sound(snd_slide); 
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_next_room">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move to the next room if 'N' or 'Select' is pressed

if ((keyboard_check(ord("N")) == true &amp;&amp; !gamepad_is_connected(gp_id)) || (gamepad_is_connected(gp_id) &amp;&amp; gamepad_button_check_pressed(gp_id, gp_select))) {  
    
    audio_play_sound(snd_gong, 10, false);
    audio_sound_gain(snd_gong, .1, 0); 
    
    if (room = room_last) {
        room_goto(rm_one);
    } else {
        room_goto_next();
    }
    
  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drawing

    draw_self();
    
// Collision Mask
    draw_rectangle_colour(obj_player.x-10, obj_player.y-15, obj_player.x+10, obj_player.y+14, c_fuchsia, c_fuchsia, c_fuchsia, c_fuchsia, true);

// Dash indicator
    if (dash_distance_mod &gt; 0) {
        var charge_color;
        switch (dash_distance_mod) {
            case 1:
                charge_color = c_maroon;
                break;
            case 2:
                charge_color = c_red;
                break;
            case 3:
                charge_color = c_yellow;
                break;
            case 4:
                charge_color = c_lime;
                break;
            case 5:
                charge_color = c_green;
                break;
            default:
                charge_color = c_green;
                break;
        }
        draw_rectangle_colour(obj_player.x-26, obj_player.y-26, obj_player.x+26, obj_player.y+26, charge_color, charge_color, charge_color, charge_color, true);
        draw_rectangle_colour(obj_player.x-26, obj_player.y-26, obj_player.x+26, obj_player.y-21, charge_color, charge_color, charge_color, charge_color, false);
        draw_rectangle_colour(obj_player.x-26, obj_player.y-26, obj_player.x-21, obj_player.y+26, charge_color, charge_color, charge_color, charge_color, false);
        draw_rectangle_colour(obj_player.x+21, obj_player.y-26, obj_player.x+26, obj_player.y+26, charge_color, charge_color, charge_color, charge_color, false);
        draw_rectangle_colour(obj_player.x-26, obj_player.y+21, obj_player.x+26, obj_player.y+26, charge_color, charge_color, charge_color, charge_color, false);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
