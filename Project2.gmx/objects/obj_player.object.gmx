<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fahad_player_test_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player

maxspd = 8;
minspd = 0;
jumpheight = 8;
jumppeak = 0;  
hspd = 0;
vspd = 0;
xrem = 0;
yrem = 0;
acc = .5;
grav = .30;

dash_count = 0;
can_dash = false;
dash_speed = 15;
dash_frames_v = 0;
dash_frames_h = 0;
dashed = false;

state = scr_player_move_state;

scr_get_input();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Execute the state

scr_get_input();
script_execute(state);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations

//Horizontal animations if no vertical speed. 
    
    //Switches to idle if hspd and vspd are 0 and we aren't finishing the falling animation.
    if(hspd == 0 &amp;&amp; vspd == 0 &amp;&amp; sprite_index != spr_player_fall &amp;&amp; sprite_index != spr_player_slide &amp;&amp; sprite_index != spr_player_crouch){ 
        sprite_index = spr_player_idle; 
    }
    //Switches to running if we have any hspd but aren't jumping/falling.
    else if( hspd != 0 &amp;&amp; vspd == 0 &amp;&amp; sprite_index != spr_player_slide){
        sprite_index = spr_fahad_player_test_1;     
        image_speed = .13*abs(hspd)/4 * (delta_time)/(1/60*1000000); //animation speed is a factor of our speed. 
    }
    
//Jumping and falling animation based on previous animation conditions. 
    
    //Switches to jump animation if we are moving upwards and haven't already switched.
    if(vspd &lt; 0 &amp;&amp; sprite_index != spr_player_jump){
        sprite_index = spr_player_jump;
        image_speed = (delta_time)/(1/9*1000000); 
    }
    //Stops jump animation on the last frame.
    else if(vspd &lt; 0 &amp;&amp; sprite_index == spr_player_jump &amp;&amp; image_index &gt; image_number-1){
        image_speed = 0; 
        image_index = 2; 
    }
    //Switches to the falling animation if the player is moving downwards and hasn't already switched. 
    else if(vspd &gt; 0 &amp;&amp; sprite_index != spr_player_fall){
        sprite_index = spr_player_fall;
        image_speed = 0; 
        image_index = 0; 
    }
    //Starts playing the falling animation once the player hits the ground. 
    else if(vspd == 0 &amp;&amp; sprite_index == spr_player_fall &amp;&amp; image_index == 0){
        image_speed = (delta_time)/(1/15*1000000);
    }
    //Switches back to idle once the falling animation finishes. 
    else if(floor(vspd) == 0 &amp;&amp; sprite_index == spr_player_fall &amp;&amp; image_index &gt; image_number-1){
        sprite_index = spr_player_idle; 
    }
    
//Sliding Animations
    
    //Switches to the sliding animation if the player presses down and hasn't already been switched. 
    if(down &amp;&amp; place_meeting(x, y+16, obj_solid) &amp;&amp; sprite_index != spr_player_slide){
        sprite_index = spr_player_slide;
        image_speed = (delta_time)/(1/15*1000000);
    }
    //Stops the sliding animation on the slide 
    else if(sprite_index == spr_player_slide &amp;&amp; image_index &gt; 3 &amp;&amp; image_index &lt; 4)
    {
        image_index = 3; 
        image_speed = 0; 
    }
    //Reverses the sliding animation if the player lets go of the down key. 
    else if(!down &amp;&amp; !down_held &amp;&amp; hspd == 0 &amp;&amp; sprite_index == spr_player_slide &amp;&amp; image_index &lt;= (image_number/2)){
        image_index = image_number-1 - image_index; 
        image_speed = (delta_time)/(1/15*1000000);
    }
    //Switches to the idle animation if the down key is not being pressed and the sliding animation has finished.
    else if(!down &amp;&amp; !down_held &amp;&amp; sprite_index == spr_player_slide &amp;&amp; image_index &gt; image_number-1){
        sprite_index = spr_player_idle;  
    }
    
//Crouching Animation

    //Switches to the crouching animation if the player presses down, isn't moving, and hasn't already been switched.
    if(down &amp;&amp; place_meeting(x, y+16, obj_solid) &amp;&amp; hspd == 0 &amp;&amp; sprite_index != spr_player_crouch){
        sprite_index = spr_player_crouch; 
        image_speed = (delta_time)/(1/9*1000000);
    }
    //Stops the crouching animation on the squat.
    else if(sprite_index == spr_player_crouch &amp;&amp; image_index &gt; 2 &amp;&amp; image_index &lt; 3){
        image_index = 2;
        image_speed = 0; 
    }
    //REverse the crouching animation if the player lets go of the down key. 
    else if(!down &amp;&amp; !down_held &amp;&amp; hspd == 0 &amp;&amp; sprite_index == spr_player_crouch &amp;&amp; image_index &lt;= (image_number/2)){
        image_index = image_number-1 - image_index; 
        image_speed = (delta_time)/(1/15*1000000);
    }
    else if(!down &amp;&amp; !down_held &amp;&amp; sprite_index == spr_player_slide &amp;&amp; image_index &gt; image_number-1){
        sprite_index = spr_player_idle; 
    }
    
    
    
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sound Effects

if(keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord("W")))
{
    audio_play_sound(snd_jump_0, 10, false);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_next_room">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move to the next room if 'N' is pressed

if (keyboard_check(ord("N")) == true) {  
    
    audio_play_sound(snd_gong, 10, false);
    
    if (room = room_last) {
        room_goto(rm_one);
    } else {
        room_goto_next();
    }
    
  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
