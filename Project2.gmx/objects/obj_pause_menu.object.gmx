<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables.

//Pause Options

    //menu_options determines which nested layer the player is in. 
    enum menu_options{
        pause_menu,
        options_menu,
        quit_menu 
    };
    
    //First layer: pause
    enum pause_options{
        continue_game,
        options_game,
        quit_game 
    }; 
    
    //Second layer: options
    enum options_options{
        fullscreen,
        vsync, 
        debug
    }; 
    
    //Third layer: quit
    enum quit_options{
        yes,
        no
    }; 
    
// Display variables    
    wind_w = window_get_width()/2;
    wind_h = window_get_height()/3;

    string_w = string_width("Game Paused")/2; 
    string_h = string_height("Game Paused")/2;
    
// Navigation variables    
    menu = menu_options.pause_menu;
    cursor = pause_options.continue_game; 

// Input variables
    right = false;
    right_held = false;
    right_released = false;
    
    left = false;
    left_held = false;
    left_released = false;
    
    up = false; 
    up_held = false;
    up_released = false;
    stick_up_held = false;
    stick_up = false;
    stick_up_released = false;
    
    down = false;
    down_held = false;
    down_released = false;
    
    sprint = false;
    dash = false;
    dash_held = false;
    dash_released = false;
    charge_dash = false;
    charge_dash_held = false;
    charge_dash_released = false;
    
    diag_ul = false;
    diag_ul_held = false;
    diag_ul_released = false;
    diag_ur = false;
    diag_ur_held = false;
    diag_ur_released = false;
    diag_dl = false;
    diag_dl_held = false;
    diag_dl_released = false;
    diag_dr = false;
    diag_dr_held = false;
    diag_dr_released = false;
    
// Controller only variables
    gp_id = 0;
    threshold = .5;
    threshold_diag = 1.05;
    controller_alarm = 1;
    magnitude = 0;
    x_axis = 0;
    y_axis = 0;

// Create the audio emitter
    audio_em = audio_emitter_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_get_input(); 

//Reassign variables if display size changes. 
if(wind_w != window_get_width()/2){
    wind_w = window_get_width()/2;
}
if(wind_h != window_get_height()/3){
    wind_h = window_get_height()/3;
}


//Keyboard Selection Highlight
    if((!gamepad_is_connected(gp_id) &amp;&amp; up) || (gamepad_is_connected(gp_id) &amp;&amp; stick_up)){
            cursor = floor(cursor) - 1; 
    }
    else if(down){
            cursor = floor(cursor) + 1; 
    }

//Pause Menu
    if(menu == menu_options.pause_menu){
        string_w = string_width("Game Paused")/2; 
        string_h = string_height("Game Paused")/2;
        
        //Mouse Cursor selection Highlight
        if(window_mouse_get_x() &gt; wind_w - string_w &amp;&amp; window_mouse_get_x() &lt; wind_w + string_w){
            //Continue
            if(window_mouse_get_y() &gt; wind_h - string_h + string_h * 2 + 10 &amp;&amp; window_mouse_get_y() &lt; wind_h - string_h + string_h * 4 + 20){
                cursor = pause_options.continue_game;  
            }
            //Options
            else if(window_mouse_get_y() &gt; wind_h - string_h + string_h * 4 + 20 &amp;&amp; window_mouse_get_y() &lt; wind_h - string_h + string_h * 6 + 30){
                cursor = pause_options.options_game;
            }
            //Quit
            else if(window_mouse_get_y() &gt; wind_h - string_h + string_h * 6 + 40 &amp;&amp; window_mouse_get_y() &lt; wind_h - string_h + string_h * 8 + 50){
                cursor = pause_options.quit_game; 
            }
        }     
        
        //Universal keyboard Selection, Gamepad Selection, and Mouse Selection
        //Continue
        if((keyboard_check_pressed(vk_escape) || mouse_check_button_pressed(mb_right) || (floor(cursor) == pause_options.continue_game &amp;&amp; keyboard_check_pressed(vk_enter)))
          ||(gamepad_is_connected(gp_id) &amp;&amp; (gamepad_button_check_pressed(gp_id, gp_face2) || (floor(cursor) == pause_options.continue_game &amp;&amp; up)))
          ||(floor(cursor) == pause_options.continue_game &amp;&amp; mouse_check_button_pressed(mb_left))){
            // Wait 1/12 of a second before resuming input.
            global.resume_frames = 5;
            global.pauseActive = false; 
        }
        //Options
        else if((floor(cursor) == pause_options.options_game &amp;&amp; keyboard_check_pressed(vk_enter))
               || (gamepad_is_connected(gp_id) &amp;&amp; (floor(cursor) == pause_options.options_game &amp;&amp; up))
               || (floor(cursor) == pause_options.options_game &amp;&amp; mouse_check_button_pressed(mb_left))){
              menu = menu_options.options_menu; 
              cursor = options_options.fullscreen;  
        }
        //Quit
        else if((floor(cursor) == pause_options.quit_game &amp;&amp; keyboard_check_pressed(vk_enter))
               || (gamepad_is_connected(gp_id) &amp;&amp; (floor(cursor) == pause_options.quit_game &amp;&amp; up))
               || (floor(cursor) == pause_options.quit_game &amp;&amp; mouse_check_button_pressed(mb_left))){
                menu = menu_options.quit_menu; 
                cursor = quit_options.no; 
        }
        
        //Cursor wrapping 
        if(cursor &lt; pause_options.continue_game){
            cursor = pause_options.quit_game; 
        }
        else if(cursor &gt; pause_options.quit_game){
            cursor = pause_options.continue_game; 
        }
    }
//Options Menu
    else if(menu == menu_options.options_menu){
        string_w = string_width("Options")/2;
        string_h = string_height("Options")/2;
        
        //Mouse Cursor selection Highlight
        if(window_mouse_get_x() &gt; wind_w - string_w &amp;&amp; window_mouse_get_x() &lt; wind_w + string_w  + string_width("Show Debug: ") + 10){
            //Fullscreen
            if(window_mouse_get_y() &gt; wind_h - string_h + string_h * 2 + 10 &amp;&amp; window_mouse_get_y() &lt; wind_h - string_h + string_h * 4 + 20){
                cursor = options_options.fullscreen;  
            } 
            //Vsync
            else if(window_mouse_get_y() &gt; wind_h - string_h + string_h * 4 + 20 &amp;&amp; window_mouse_get_y() &lt; wind_h - string_h + string_h * 6 + 30){
                cursor = options_options.vsync;  
            }
            //Debug
            else if(window_mouse_get_y() &gt; wind_h - string_h + string_h * 6 + 30 &amp;&amp; window_mouse_get_y() &lt; wind_h - string_h + string_h * 8 + 40){
                cursor = options_options.debug;  
            }
        }
        
        //Fullscreen
        if((floor(cursor) == options_options.fullscreen &amp;&amp; keyboard_check_pressed(vk_enter))
               || (gamepad_is_connected(gp_id) &amp;&amp; (floor(cursor) == options_options.fullscreen &amp;&amp; up))
               || (floor(cursor) == options_options.fullscreen &amp;&amp; mouse_check_button_pressed(mb_left))){
            if(instance_exists(obj_game_mode)){
                global.fullscreen = !global.fullscreen;     
            } 
        }
        //Vsync
        else if((floor(cursor) == options_options.vsync &amp;&amp; keyboard_check_pressed(vk_enter))
               || (gamepad_is_connected(gp_id) &amp;&amp; (floor(cursor) == options_options.vsync &amp;&amp; up))
               || (floor(cursor) == options_options.vsync &amp;&amp; mouse_check_button_pressed(mb_left))){
            if(instance_exists(obj_game_mode)){
                global.vsync = !global.vsync;     
            } 
        }
        //Debug
        else if((floor(cursor) == options_options.debug &amp;&amp; keyboard_check_pressed(vk_enter))
               || (gamepad_is_connected(gp_id) &amp;&amp; (floor(cursor) == options_options.debug &amp;&amp; up))
               || (floor(cursor) == options_options.debug &amp;&amp; mouse_check_button_pressed(mb_left))){
            if(instance_exists(obj_game_mode)){
                global.debug = !global.debug;     
            } 
        }
        //Back
        else if((keyboard_check_pressed(vk_escape) || mouse_check_button_pressed(mb_right))
          ||(gamepad_is_connected(gp_id) &amp;&amp; (gamepad_button_check_pressed(gp_id, gp_face2)))){ 
            menu = menu_options.pause_menu; 
            cursor = pause_options.continue_game; 
        }
        
        //Cursor wrapping 
        if(cursor &lt; options_options.fullscreen){
            cursor = options_options.debug; 
        }
        else if(cursor &gt; options_options.debug){
            cursor = options_options.fullscreen; 
        }
    }
//Quit Menu
    else if(menu == menu_options.quit_menu){
        string_w = string_width("Are you sure you want to quit?")/2;
        string_h = string_height("Are you sure you want to quit?")/2;
        
        //Mouse Cursor selection Highlight
        if(window_mouse_get_x() &gt; wind_w - string_w &amp;&amp; window_mouse_get_x() &lt; wind_w + string_w){
            //Yes
            if(window_mouse_get_y() &gt; wind_h - string_h + string_h * 2 + 10 &amp;&amp; window_mouse_get_y() &lt; wind_h - string_h + string_h * 4 + 20){
                cursor = quit_options.yes;  
            }
            //No 
            else if(window_mouse_get_y() &gt; wind_h - string_h + string_h * 4 + 20 &amp;&amp; window_mouse_get_y() &lt; wind_h - string_h + string_h * 6 + 30){
                cursor = quit_options.no;  
            }
        }
        
        //Yes
        if((floor(cursor) == quit_options.yes &amp;&amp; keyboard_check_pressed(vk_enter))
               || (gamepad_is_connected(gp_id) &amp;&amp; (floor(cursor) == quit_options.yes &amp;&amp; up))
               || (floor(cursor) == quit_options.yes &amp;&amp; mouse_check_button_pressed(mb_left))){
              game_end(); 
        }
        //No
        else if((keyboard_check_pressed(vk_escape) || mouse_check_button_pressed(mb_right) || (floor(cursor) == quit_options.no &amp;&amp; keyboard_check_pressed(vk_enter)))
          ||(gamepad_is_connected(gp_id) &amp;&amp; (gamepad_button_check_pressed(gp_id, gp_face2) || (floor(cursor) == quit_options.no &amp;&amp; up)))
          ||(floor(cursor) == quit_options.no &amp;&amp; mouse_check_button_pressed(mb_left))){ 
            menu = menu_options.pause_menu; 
            cursor = pause_options.continue_game; 
        }
        
         //Cursor wrapping 
        if(cursor &lt; quit_options.yes){
            cursor = quit_options.no; 
        }
        else if(cursor &gt; quit_options.no){
            cursor = quit_options.yes; 
        }
    }

    
    
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left); 
draw_set_valign(fa_left);

view_w = view_wview/2;
view_h = view_hview/3; 

if(menu == menu_options.pause_menu){
    string_w = string_width("Game Paused")/2; 
    string_h = string_height("Game Paused")/2;
    
    //Draw title
    draw_text_colour(wind_w - string_w, wind_h - string_h, "Game Paused", c_white, c_white, c_ltgray, c_ltgray, 1);
    
    //Draw all options and the option the player is over as highlighted. 
    if(floor(cursor) == pause_options.continue_game){
    /**/draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*2 + 10, "Continue", c_yellow, c_white, c_yellow, c_white, 1);
        draw_circle_colour(wind_w - string_w + 6, wind_h - string_h + string_h*2 + 10 +6, 6, c_yellow, c_white, false);
        
        draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*4 + 20, "Options", c_white, c_white, c_ltgray, c_ltgray, 1);
        draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*6 + 30, "Quit", c_white, c_white, c_ltgray, c_ltgray, 1); 
    }
    else if(floor(cursor) == pause_options.options_game){
        draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*2 + 10, "Continue", c_white, c_white, c_ltgray, c_ltgray, 1);
        
    /**/draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*4 + 20, "Options", c_yellow, c_white, c_yellow, c_white, 1);
        draw_circle_colour(wind_w - string_w + 6, wind_h - string_h + string_h*4 + 20 +6, 6, c_yellow, c_white, false);
        
        draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*6 + 30, "Quit", c_white, c_white, c_ltgray, c_ltgray, 1); 
    }
    else if(floor(cursor) == pause_options.quit_game){
        draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*2 + 10, "Continue", c_white, c_white, c_ltgray, c_ltgray, 1);
        draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*4 + 20, "Options", c_white, c_white, c_ltgray, c_ltgray, 1);
        
    /**/draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*6 + 30, "Quit", c_yellow, c_white, c_yellow, c_white, 1);
        draw_circle_colour(wind_w - string_w + 6, wind_h - string_h + string_h*6 + 30 +6, 6, c_yellow, c_white, false); 
    }
}
else if(menu == menu_options.options_menu){
    string_w = string_width("Options")/2;
    string_h = string_height("Options")/2;
    
    //Draw title
    draw_text_colour(wind_w - string_w, wind_h - string_h, "Options", c_white, c_white, c_ltgray, c_ltgray, 1);
    
    //Draw all options and the option the player is over as highlighted. 
    if(floor(cursor) == options_options.fullscreen){
    /**/draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*2 + 10, "Fullscreen: ", c_yellow, c_white, c_yellow, c_white, 1);
        //Fullscreen
        if(instance_exists(obj_game_mode) &amp;&amp; global.fullscreen == true){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*2 + 10, "Yes", c_yellow, c_white, c_yellow, c_white, 1);
        }
        else if(instance_exists(obj_game_mode) &amp;&amp; global.fullscreen == false){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*2 + 10, "No", c_yellow, c_white, c_yellow, c_white, 1);
        }
        draw_circle_colour(wind_w - string_w + 6, wind_h - string_h + string_h*2 + 10 +6, 6, c_yellow, c_white, false);
        //Vsync
        draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*4 + 20, "Vsync: ", c_white, c_white, c_ltgray, c_ltgray, 1);
        if(instance_exists(obj_game_mode) &amp;&amp; global.vsync == true){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*4 + 20, "Yes", c_white, c_white, c_ltgray, c_ltgray, 1);
        }
        else if(instance_exists(obj_game_mode) &amp;&amp; global.vsync == false){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*4 + 20, "No", c_white, c_white, c_ltgray, c_ltgray, 1);
        }
        //Debug
        draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*6 + 30, "Show Debug: ", c_white, c_white, c_ltgray, c_ltgray, 1);
        if(instance_exists(obj_game_mode) &amp;&amp; global.debug == true){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*6 + 30, "Yes", c_white, c_white, c_ltgray, c_ltgray, 1);
        }
        else if(instance_exists(obj_game_mode) &amp;&amp; global.debug == false){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*6 + 30, "No", c_white, c_white, c_ltgray, c_ltgray, 1);
        }
        
    }
    else if(floor(cursor) == options_options.vsync){
        draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*2 + 10, "Fullscreen: ", c_white, c_white, c_ltgray, c_ltgray, 1);
        //Fullscreen
        if(instance_exists(obj_game_mode) &amp;&amp; global.fullscreen == true){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*2 + 10, "Yes", c_white, c_white, c_ltgray, c_ltgray, 1);
        }
        else if(instance_exists(obj_game_mode) &amp;&amp; global.fullscreen == false){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*2 + 10, "No", c_white, c_white, c_ltgray, c_ltgray, 1);
        }
        //Vsync
    /**/draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*4 + 20, "Vsync: ", c_yellow, c_white, c_yellow, c_white, 1);
        if(instance_exists(obj_game_mode) &amp;&amp; global.vsync == true){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*4 + 20, "Yes", c_yellow, c_white, c_yellow, c_white, 1);
        }
        else if(instance_exists(obj_game_mode) &amp;&amp; global.vsync == false){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*4 + 20, "No", c_yellow, c_white, c_yellow, c_white, 1);
        }
        draw_circle_colour(wind_w - string_w + 6, wind_h - string_h + string_h*4 + 20 +6, 6, c_yellow, c_white, false);
        //Debug
        draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*6 + 30, "Show Debug: ", c_white, c_white, c_ltgray, c_ltgray, 1);
        if(instance_exists(obj_game_mode) &amp;&amp; global.debug == true){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*6 + 30, "Yes", c_white, c_white, c_ltgray, c_ltgray, 1);
        }
        else if(instance_exists(obj_game_mode) &amp;&amp; global.debug == false){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*6 + 30, "No", c_white, c_white, c_ltgray, c_ltgray, 1);
        }  
    }
    else if(floor(cursor) == options_options.debug){
        draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*2 + 10, "Fullscreen: ", c_white, c_white, c_ltgray, c_ltgray, 1);
        //Fullscreen
        if(instance_exists(obj_game_mode) &amp;&amp; global.fullscreen == true){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*2 + 10, "Yes", c_white, c_white, c_ltgray, c_ltgray, 1);
        }
        else if(instance_exists(obj_game_mode) &amp;&amp; global.fullscreen == false){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*2 + 10, "No", c_white, c_white, c_ltgray, c_ltgray, 1);
        }
        //Vsync
        draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*4 + 20, "Vsync: ", c_white, c_white, c_ltgray, c_ltgray, 1);
        if(instance_exists(obj_game_mode) &amp;&amp; global.vsync == true){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*4 + 20, "Yes", c_white, c_white, c_ltgray, c_ltgray, 1);
        }
        else if(instance_exists(obj_game_mode) &amp;&amp; global.vsync == false){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*4 + 20, "No", c_white, c_white, c_ltgray, c_ltgray, 1);
        }
        //Debug
    /**/draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*6 + 30, "Show Debug: ", c_yellow, c_white, c_yellow, c_white, 1);
        if(instance_exists(obj_game_mode) &amp;&amp; global.debug == true){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*6 + 30, "Yes",  c_yellow, c_white, c_yellow, c_white, 1);
        }
        else if(instance_exists(obj_game_mode) &amp;&amp; global.debug == false){
            draw_text_colour(wind_w - string_w + 20 + string_width("Show Debug: ") + 10, wind_h - string_h + string_h*6 + 30, "No",  c_yellow, c_white, c_yellow, c_white, 1);
        }
        draw_circle_colour(wind_w - string_w + 6, wind_h - string_h + string_h*6 + 30 +6, 6, c_yellow, c_white, false);
    } 
    
}
else if(menu == menu_options.quit_menu){
    string_w = string_width("Are you sure you want to quit?")/2;
    string_h = string_height("Are you sure you want to quit?")/2;

    //Draw title
    draw_text_colour(wind_w - string_w, wind_h - string_h, "Are you sure you want to quit?", c_white, c_white, c_ltgray, c_ltgray, 1);
    
    //Draw all options and the option the player is over as highlighted. 
    if(floor(cursor) == quit_options.yes){
    /**/draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*2 + 10, "Yes", c_yellow, c_white, c_yellow, c_white, 1);
        draw_circle_colour(wind_w - string_w + 6, wind_h - string_h + string_h*2 + 10 +6, 6, c_yellow, c_white, false);
        
        draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*4 + 20, "No", c_white, c_white, c_ltgray, c_ltgray, 1);
    }
    else if(floor(cursor) == quit_options.no){
        draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*2 + 10, "Yes", c_white, c_white, c_ltgray, c_ltgray, 1);
        
    /**/draw_text_colour(wind_w - string_w + 20, wind_h - string_h + string_h*4 + 20, "No", c_yellow, c_white, c_yellow, c_white, 1);
        draw_circle_colour(wind_w - string_w + 6, wind_h - string_h + string_h*4 + 20 +6, 6, c_yellow, c_white, false);
    } 
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
