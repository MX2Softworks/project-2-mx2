<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_moving_platform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the enemy patrol

dir = 1;
maxspd = 2;
hspd = 0;
vspd = 0;

scr_fix_spawn(obj_all);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If Game is Paused

//Pause if Pause Game
if(instance_exists(obj_game_mode) &amp;&amp; global.pauseActive == true){
    exit;  
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Execute the script

// sets up directional variables
hspd = dir * maxspd * (0.00006*delta_time);
if(place_meeting(x + hspd, y, obj_moving_platform_bound))
{
     // pixel perfect collision
        while(!place_meeting(x + sign(hspd), y, obj_moving_platform_bound))
        {
            x += sign(hspd);
        }
        
        hspd = 0;
        dir *= -1;
    
}
if(instance_exists(obj_player)){
    if(place_meeting(x, y-1, obj_player)){
        inst = instance_place(x, y-1, obj_player);
        obj_player.hspd_platform = hspd; 
    }
}

if(instance_exists(obj_enemy_patrol)){
    if(place_meeting(x, y-1, obj_enemy_patrol)){
        inst = instance_place(x, y-1, obj_enemy_patrol);
        (inst).hspd_platform = hspd;  
    }
}


/*

// vertical collision
   // checks to see if on floor
    if (place_meeting(x, y + vspd, obj_solid))
    {
        // collision prediction
        while(!place_meeting(x, y + sign(vspd), obj_solid))
        {
            y += sign(vspd);
        }
        
        vspd = 0;
        
        if(fearofheights) &amp;&amp; !position_meeting(x + (sprite_width / 2) * dir, y + (sprite_height / 2) + 8, obj_solid)
        {
            dir *= -1;
        }
    }*/
    
// apply movement
x += hspd;
y += vspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tile sprite across surface

s_width = sprite_get_width(self.sprite_index);   //Width of the sprite in pixels.
s_height = sprite_get_height(sprite_index); //Height of the sprite in pixels. 

offset_x =  s_width * image_xscale/2 - s_width/2;   //Offset is in pixels from origin of object, subtract width/2 to compensate for drawing from origin.
offset_y =  s_height * image_yscale/2 - s_height/2; //Offset is in pixels from origin of object, subtract height/2 to compensate for drawing from origin. 

//tiles sprites across the width and height of the object. Only works for scales of whole numbers. 
for(index_x = 0; index_x &lt; image_xscale * s_width; index_x += s_width){
    for(index_y = 0; index_y &lt; image_yscale * s_height; index_y += s_height){
        draw_sprite(sprite_index, 0, x-offset_x+index_x, y-offset_y+index_y); 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
